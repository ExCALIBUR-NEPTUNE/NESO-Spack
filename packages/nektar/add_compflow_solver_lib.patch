diff --git a/CMakeLists.txt b/CMakeLists.txt
index 34c7e8ad4..2607b346b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -301,6 +301,8 @@ ENDIF (APPLE)
 # that allows us to detect library dependencies automatically.
 IF (NEKTAR_BUILD_LIBRARY)
     INCLUDE_DIRECTORIES(library)
+    # List of Nektar++ libraries will be rebuilt every configuration.
+    SET(NEKTAR++_LIBRARIES "" CACHE INTERNAL "")
 ENDIF()
 
 INCLUDE_DIRECTORIES(utilities)
@@ -310,9 +312,6 @@ INCLUDE_DIRECTORIES(solvers)
 ADD_SUBDIRECTORY(solvers)
 
 IF (NEKTAR_BUILD_LIBRARY)
-    # List of Nektar++ libraries will be rebuilt every configuration.
-    SET(NEKTAR++_LIBRARIES "" CACHE INTERNAL "")
-
     ADD_SUBDIRECTORY(library)
     INSTALL(EXPORT Nektar++Libraries DESTINATION ${NEKTAR_CMAKE_DIR} COMPONENT dev)
 ENDIF (NEKTAR_BUILD_LIBRARY)
diff --git a/cmake/NektarCommon.cmake b/cmake/NektarCommon.cmake
index 01274b4fe..817b6c661 100644
--- a/cmake/NektarCommon.cmake
+++ b/cmake/NektarCommon.cmake
@@ -209,29 +209,33 @@ ENDMACRO()
 #     automatically put into a `dev` package.
 #
 MACRO(ADD_NEKTAR_LIBRARY name)
-    CMAKE_PARSE_ARGUMENTS(NEKLIB "" "DESCRIPTION;SUMMARY" "DEPENDS;SOURCES;HEADERS" ${ARGN})
+    CMAKE_PARSE_ARGUMENTS(NEKLIB "" "DESCRIPTION;SUMMARY;TARGET_SUFFIX" "DEPENDS;SOURCES;HEADERS" ${ARGN})
 
-    ADD_LIBRARY(${name} ${NEKTAR_LIBRARY_TYPE} ${NEKLIB_SOURCES} ${NEKLIB_HEADERS})
+    SET (NEKLIB_TARGET_NAME ${name}${NEKLIB_TARGET_SUFFIX})
+    ADD_LIBRARY(${NEKLIB_TARGET_NAME} ${NEKTAR_LIBRARY_TYPE} ${NEKLIB_SOURCES} ${NEKLIB_HEADERS})
 
     # Infer component name from lower-case library name, variables should use
     # upper-case.
-    STRING(TOLOWER ${name} NEKLIB_COMPONENT)
-    STRING(TOUPPER ${name} NEKLIB_COMPVAR)
+    STRING(TOLOWER ${NEKLIB_TARGET_NAME} NEKLIB_COMPONENT)
+    STRING(TOUPPER ${NEKLIB_TARGET_NAME} NEKLIB_COMPVAR)
 
     # Add name to a list so that we know for constructing dependencies.
-    SET(NEKTAR++_LIBRARIES ${NEKTAR++_LIBRARIES} ${name} CACHE INTERNAL "")
+    SET(NEKTAR++_LIBRARIES ${NEKTAR++_LIBRARIES} ${NEKLIB_TARGET_NAME} CACHE INTERNAL "")
 
-    SET_PROPERTY(TARGET ${name} PROPERTY FOLDER ${NEKLIB_COMPONENT})
-    SET_PROPERTY(TARGET ${name} PROPERTY VERSION ${NEKTAR_VERSION})
+    SET_PROPERTY(TARGET ${NEKLIB_TARGET_NAME} PROPERTY FOLDER ${NEKLIB_COMPONENT})
+    SET_PROPERTY(TARGET ${NEKLIB_TARGET_NAME} PROPERTY VERSION ${NEKTAR_VERSION})
+    # Output name is always ${name}, even if a suffix was used for the target name
+    SET_PROPERTY(TARGET ${NEKLIB_TARGET_NAME} PROPERTY OUTPUT_NAME ${name})
 
-    SET_COMMON_PROPERTIES(${name})
+    SET_COMMON_PROPERTIES(${NEKLIB_TARGET_NAME})
 
-    INSTALL(TARGETS ${name}
+    INSTALL(TARGETS ${NEKLIB_TARGET_NAME}
         EXPORT Nektar++Libraries
         RUNTIME DESTINATION ${NEKTAR_BIN_DIR} COMPONENT ${NEKLIB_COMPONENT} OPTIONAL
         ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} COMPONENT ${NEKLIB_COMPONENT} OPTIONAL
         LIBRARY DESTINATION ${NEKTAR_LIB_DIR} COMPONENT ${NEKLIB_COMPONENT} OPTIONAL)
 
+    # Headers always installed in <include_dir>/${name} rather than <include_dir>/${NEKLIB_TARGET_NAME}
     FOREACH(HEADER ${NEKLIB_HEADERS})
         STRING(REGEX MATCH "(.*)[/\\]" DIR ${HEADER})
         INSTALL(FILES ${HEADER}
@@ -241,7 +245,7 @@ MACRO(ADD_NEKTAR_LIBRARY name)
 
     # If we have dependencies then link against them.
     IF(NEKLIB_DEPENDS)
-        TARGET_LINK_LIBRARIES(${name} LINK_PUBLIC ${NEKLIB_DEPENDS})
+        TARGET_LINK_LIBRARIES(${NEKLIB_TARGET_NAME} LINK_PUBLIC ${NEKLIB_DEPENDS})
     ENDIF()
 ENDMACRO()
 
diff --git a/solvers/CMakeLists.txt b/solvers/CMakeLists.txt
index 28d0e0f76..5559f9946 100644
--- a/solvers/CMakeLists.txt
+++ b/solvers/CMakeLists.txt
@@ -10,6 +10,7 @@ MACRO(ADD_SOLVER_EXECUTABLE name)
 
     IF (SOLVER_LIBRARY_SOURCES)
         ADD_LIBRARY(${name}-obj OBJECT ${SOLVER_LIBRARY_SOURCES})
+        SET_PROPERTY(TARGET ${name}-obj PROPERTY POSITION_INDEPENDENT_CODE ON)
         ADD_DEPENDENCIES(${name}-obj SolverUtils)
         LIST(APPEND SOLVER_SOURCES $<TARGET_OBJECTS:${name}-obj>)
     ENDIF()
@@ -22,6 +23,25 @@ MACRO(ADD_SOLVER_EXECUTABLE name)
         COMPONENT ${SOLVER_COMPONENT} DEPENDS SolverUtils SOURCES ${SOLVER_SOURCES})
 ENDMACRO()
 
+MACRO(ADD_SOLVER_LIBRARY name)
+    CMAKE_PARSE_ARGUMENTS(SOLVERLIB "" "" "SOURCES;HEADERS;DEPENDS" ${ARGN} )
+
+    # If an object library was already buuilt using ADD_SOLVER_EXECUTABLE, reuse that
+    IF (TARGET ${name}-obj)
+      SET(SOLVERLIB_SRCS_USED $<TARGET_OBJECTS:${name}-obj>)
+    ELSE()
+      SET(SOLVERLIB_SRCS_USED ${SOLVERLIB_SOURCES})
+    ENDIF()
+    # Append "Lib" suffix to target name, otherwise it clashes with the executable (final output will still be called ${name})
+    ADD_NEKTAR_LIBRARY(${name}
+                       TARGET_SUFFIX Lib
+                       SOURCES ${SOLVERLIB_SRCS_USED}
+                       HEADERS ${SOLVERLIB_HEADERS}
+                       DEPENDS ${SOLVERLIB_DEPENDS}
+                       SUMMARY "Nektar++ ${name} library"
+                       DESCRIPTION "This library provides functionality used by ${name}.")
+ENDMACRO()
+
 MACRO(ADD_SOLVER_UTILITY name solver)
     CMAKE_PARSE_ARGUMENTS(UTIL "USELIBRARY" "COMPONENT" "SOURCES" ${ARGN})
 
diff --git a/solvers/CompressibleFlowSolver/CMakeLists.txt b/solvers/CompressibleFlowSolver/CMakeLists.txt
index d116f722d..90961695f 100644
--- a/solvers/CompressibleFlowSolver/CMakeLists.txt
+++ b/solvers/CompressibleFlowSolver/CMakeLists.txt
@@ -64,6 +64,78 @@ IF( NEKTAR_SOLVER_COMPRESSIBLE_FLOW )
         Preconditioner/PreconCfsOp.cpp
         Preconditioner/PreconCfsBRJ.cpp
         )
+
+        SET(CompressibleFlowSolverHeaders
+          ArtificialDiffusion/NonSmoothShockCapture.h
+          ArtificialDiffusion/ArtificialDiffusion.h
+          BoundaryConditions/StagnationInflowBC.h
+          BoundaryConditions/SymmetryBC.h
+          BoundaryConditions/ExtrapOrder0BC.h
+          BoundaryConditions/WallViscousBC.h
+          BoundaryConditions/RiemannInvariantBC.h
+          BoundaryConditions/IsentropicVortexBC.h
+          BoundaryConditions/TimeDependentBC.h
+          BoundaryConditions/PressureOutflowBC.h
+          BoundaryConditions/WallBC.h
+          BoundaryConditions/PressureInflowFileBC.h
+          BoundaryConditions/PressureMachTemperatureBC.h
+          BoundaryConditions/CFSBndCond.h
+          BoundaryConditions/RinglebFlowBC.h
+          BoundaryConditions/PressureOutflowNonReflectiveBC.h
+          ArtificialDiffusion/NonSmoothShockCapture.h
+          ArtificialDiffusion/ArtificialDiffusion.h
+          BoundaryConditions/StagnationInflowBC.h
+          BoundaryConditions/SymmetryBC.h
+          BoundaryConditions/ExtrapOrder0BC.h
+          BoundaryConditions/WallViscousBC.h
+          BoundaryConditions/RiemannInvariantBC.h
+          BoundaryConditions/IsentropicVortexBC.h
+          BoundaryConditions/TimeDependentBC.h
+          BoundaryConditions/PressureOutflowBC.h
+          BoundaryConditions/WallBC.h
+          BoundaryConditions/PressureInflowFileBC.h
+          BoundaryConditions/PressureMachTemperatureBC.h
+          BoundaryConditions/CFSBndCond.h
+          BoundaryConditions/RinglebFlowBC.h
+          BoundaryConditions/PressureOutflowNonReflectiveBC.h
+          Diffusion/DiffusionLDGNS.h
+          EquationSystems/CompressibleFlowSystemImplicit.h
+          EquationSystems/EulerCFE.h
+          EquationSystems/NavierStokesImplicitCFE.h
+          EquationSystems/EulerImplicitCFE.h
+          EquationSystems/NavierStokesCFEAxisym.h
+          EquationSystems/NavierStokesCFE.h
+          EquationSystems/IsentropicVortex.h
+          EquationSystems/RinglebFlow.h
+          Forcing/ForcingQuasi1D.h
+          Forcing/ForcingAxiSymmetric.h
+          EquationSystems/CompressibleFlowSystem.h
+          Misc/PengRobinsonEoS.h
+          Misc/IdealGasEoS.h
+          Misc/VariableConverter.h
+          Misc/VanDerWaalsEoS.h
+          Misc/RedlichKwongEoS.h
+          Misc/EquationOfState.h
+          Preconditioner/PreconCfs.h
+          Preconditioner/PreconCfsBRJ.h
+          Preconditioner/PreconCfsOp.h
+          RiemannSolvers/RoeSolverSIMD.h
+          RiemannSolvers/HLLCSolver.h
+          RiemannSolvers/AUSM2Solver.h
+          RiemannSolvers/AverageSolver.h
+          RiemannSolvers/CompressibleSolver.h
+          RiemannSolvers/ExactSolverToro.h
+          RiemannSolvers/RoeSolver.h
+          RiemannSolvers/AUSM1Solver.h
+          RiemannSolvers/LaxFriedrichsSolver.h
+          RiemannSolvers/AUSM0Solver.h
+          RiemannSolvers/AUSM3Solver.h
+          RiemannSolvers/HLLSolver.h
+       )
+
+    # Create separate library. No need to pass source files as executables LIBRARY_SOURCES objects will be reused
+    ADD_SOLVER_LIBRARY(CompressibleFlowSolver HEADERS ${CompressibleFlowSolverHeaders} DEPENDS SolverUtils)
+
     IF(NEKTAR_BUILD_UNIT_TESTS)
       ADD_SUBDIRECTORY(RiemannSolvers/UnitTests)
     ENDIF()
